// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package docspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DocsServiceClient is the client API for DocsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocsServiceClient interface {
	FreeMemory(ctx context.Context, in *FreeMemoryRequest, opts ...grpc.CallOption) (*FreeMemoryResponse, error)
}

type docsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocsServiceClient(cc grpc.ClientConnInterface) DocsServiceClient {
	return &docsServiceClient{cc}
}

func (c *docsServiceClient) FreeMemory(ctx context.Context, in *FreeMemoryRequest, opts ...grpc.CallOption) (*FreeMemoryResponse, error) {
	out := new(FreeMemoryResponse)
	err := c.cc.Invoke(ctx, "/docspb.DocsService/FreeMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocsServiceServer is the server API for DocsService service.
// All implementations must embed UnimplementedDocsServiceServer
// for forward compatibility
type DocsServiceServer interface {
	FreeMemory(context.Context, *FreeMemoryRequest) (*FreeMemoryResponse, error)
	mustEmbedUnimplementedDocsServiceServer()
}

// UnimplementedDocsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocsServiceServer struct {
}

func (UnimplementedDocsServiceServer) FreeMemory(context.Context, *FreeMemoryRequest) (*FreeMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeMemory not implemented")
}
func (UnimplementedDocsServiceServer) mustEmbedUnimplementedDocsServiceServer() {}

// UnsafeDocsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocsServiceServer will
// result in compilation errors.
type UnsafeDocsServiceServer interface {
	mustEmbedUnimplementedDocsServiceServer()
}

func RegisterDocsServiceServer(s *grpc.Server, srv DocsServiceServer) {
	s.RegisterService(&_DocsService_serviceDesc, srv)
}

func _DocsService_FreeMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServiceServer).FreeMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docspb.DocsService/FreeMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServiceServer).FreeMemory(ctx, req.(*FreeMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DocsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "docspb.DocsService",
	HandlerType: (*DocsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FreeMemory",
			Handler:    _DocsService_FreeMemory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docs/docspb/api.proto",
}
